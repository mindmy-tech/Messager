from PyQt5.QtWidgets import *
from PyQt5 import uic
from PyQt5.QtCore import *
import json
import client  as Client
import sys


# Qthread for checking for messages
class Listener_Thread(QThread):
    """
    Threading 
    To wait for msg and add them to athe scrollarea"""
    def __init__(self, parent=None):
        super().__init__(parent)

    # Signal Variable

    # emit Signal to parent class to add message 
    msg_stat = pyqtSignal(str)

    # This runs automatically when the thread is initiated 
    def run(self):
        # Variables from parent class

        #  getting client information from parent class 
        cli = self.parent().client

        # waits for msg and adds them 
        while True:
            # calls recv_msg from client 
            msg = cli.recv_msg()
            
            #  decodes message in normal str from bytes
            data = json.loads(msg.decode())

            # gets current username
            # Checks my user_id and message's user_id , we need to add msgs which are not generated by us
            user_id = self.parent().username_.text()

            # checks if the msg is from us or someone else
            if user_id != data["USERNAME"]:
                message = f"{data['USERNAME']} : {data['MESSAGE']} "

                # Emits the data to parent class
                self.msg_stat.emit(message)


# GUI Window Class
class Window(QMainWindow):

    def __init__(self):
        super(Window, self).__init__()
        self.thread = None

        # Loads .ui file
        uic.loadUi('UI\\messager_v2.ui', self)

        # gets the widgets from file to modify the widget
        self.scroll_area = self.findChild(QScrollArea, "scrollArea")
        self.scrollAreaWidgetContents = self.findChild(QWidget, "scrollAreaWidgetContents")
        self.button = self.findChild(QPushButton, "pushButton")
        self.edit = self.findChild(QLineEdit, "lineEdit")
        self.verticalLayout_4 = self.findChild(QVBoxLayout, "verticalLayout_4")
        self.scroll_area = self.findChild(QScrollArea, "scrollArea")
        self.username_ = self.findChild(QLineEdit, "lineEdit_3")
        self.edit_name = self.findChild(QPushButton, "pushButton_2")

        #  the connection stuff 
        #  we will hide them after connecting to the server
        self.ip_label = self.findChild(QLabel, "label_2")
        self.ip_connection = self.findChild(QLineEdit, "lineEdit_2")
        self.connect_  = self.findChild(QPushButton, "pushButton_3")
        self.chatroom_label = self.findChild(QLabel, "label") 

        #  assigns a name to the if they have not assigned a name before 
        self.assign_name()
        # disables the lineEdit
        self.username_.setEnabled(False)

        #  gets the text from username lineEdit
        self.username = self.username_.text()

        # Disables all the item before connection
        self.enable_item(False)

        # Connecting button to a function
        self.edit_name.clicked.connect(self.change_state)
        self.button.clicked.connect(self.frame_msg)
        self.connect_.clicked.connect(self.init_connection)

    def enable_item(self, val):
        """
        Disables / Enables item depending on val (bool) 
        """

        if val:
            self.chatroom_label.setText("Chatroom")
        else:
            self.chatroom_label.setText("Connection Pending ...")
        
        self.button.setEnabled(val)
        self.edit.setEnabled(val)
    

    def init_connection(self):
        """
        initiates the connection to the server by calling the function in client 
        """
        self.client = Client.Connect_Init(self.ip_connection.text())

        #  Enables all the items
        self.enable_item(True)

        # Recv Thread 
        self.Thread_init()

        #  Hide the connection stuff  label, lineEdit, pushButton
        self.ip_connection.hide()
        self.connect_.hide()
        self.ip_label.hide()

    def change_state(self):
        """
        Toggle button 
        if the linedit is enabled it will diable it and add the name to name.txt
        
        if it is diabled it will enable it
        """
        is_enabled = self.username_.isEnabled()
        if  is_enabled:
            self.assign_name(self.username_.text())
            self.username_.setEnabled(False)
            self.edit_name.setText("Edit")
        else:
            self.username_.setEnabled(True)
            self.edit_name.setText("Confirm")
        self.username = self.username_.text()

    def assign_name(self , name=None):
        """
        assigns name to the user 
        if the user already gave him self a name it will set it as his name 
        or else it will randomly select a name and assgin it
        """
        if name:
            self.username_.setText(name)
            f = open('name.txt', 'w')
            f.write(name)
            f.close()

        else:
            f = open('name.txt', 'r')
            from random import choice
            name = choice(f.readlines())
            self.username_.setText(name)
            f.close()

    # Func to connect the Qthread class
    def Thread_init(self):
        """
        iniiates a thead and detachs from main
        and listen for messages 
        """
        self.thread = Listener_Thread(self) 
        self.thread.msg_stat.connect(self.add_msg)
        self.thread.start()

    # Clears text in lineEdit and retrieves the msg and Calls the func to add the msg to scrollArea
    def frame_msg(self):
        """
        retrives text from lineEdit, and formats the data 
        clears the lineEdit 
        and calls add_msg function to add into the scroll area
        """
        text = self.edit.text()
        data = f'{self.username} : {text}'
        self.edit.clear()
        self.add_msg(data, 1)
        self.client.Frame_POST('0', self.username, text)

    # Makes a Frame/Layout/Label and Adds the ScrollArea
    def add_msg(self, msg, me=0):
        """
        add the msg to frame 
        depending on who send the msg 
        """
        # frame boilerplate
        frame = QFrame(self.scrollAreaWidgetContents)
        frame.setObjectName(u"frame")
        frame.setMinimumSize(QSize(0, 60))
        frame.setFrameShape(QFrame.StyledPanel)
        frame.setFrameShadow(QFrame.Raised)
        horizontalLayout = QHBoxLayout(frame)
        horizontalLayout.setObjectName(u"horizontalLayout_5")

        #  if it wasnt the user 
        if not me:
            # Label boiler plate
            label_2 = QLabel(frame)
            label_2.setObjectName(u"label_2")
            label_2.setMaximumSize(QSize(400, 16777215))
            label_2.setStyleSheet(u"background-color:  #F0EAEA;\n" \
                                  "border-radius: 13px;\n" \
                                  "padding: 15px;")
            label_2.setText(msg)

            if len(msg) > 80:
                label_2.setWordWrap(True)
            
            horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

            #  adds the msg first and then spacer so it will ve in left side
            horizontalLayout.addWidget(label_2)
            horizontalLayout.addItem(horizontalSpacer)


            self.verticalLayout_4.addWidget(frame)
        else:
            # label boilerplate
            label_2 = QLabel(frame)
            label_2.setObjectName(u"label_2")
            label_2.setMaximumSize(QSize(400, 16777215))
            label_2.setStyleSheet(u"background-color:  #F0EAEA;\n" \
                                  "border-radius: 13px;\n" \
                                  "padding: 15px;")
            label_2.setText(msg)
            

            if len(msg) > 50:
                label_2.setWordWrap(True)

            horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

            #  adds the spacer first and then msg so the msg will be on the right side

            horizontalLayout.addItem(horizontalSpacer)
            horizontalLayout.addWidget(label_2)

            self.verticalLayout_4.addWidget(frame)

        #  when a new msh comes auto matically scrolls to the last msg
        max_value = self.scrollAreaWidgetContents.size().height()
        self.scroll_area.verticalScrollBar().setMaximum(max_value)
        self.scroll_area.verticalScrollBar().setValue(max_value)


# Runs the class only if it's the main file and not run while importing it !
if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = Window()
    win.setWindowTitle("Messaging_Application")
    win.show()
    sys.exit(app.exec_())
